import {
  DescendantProvider,
  TreeViewContext,
  useDescendant
} from "./chunk-QURVBBBC.js";
import {
  Collapse_default
} from "./chunk-2UCK32S3.js";
import "./chunk-DEWOFEGW.js";
import "./chunk-TJ4WWSAQ.js";
import "./chunk-2ZFNEPHG.js";
import "./chunk-J3R4WBMP.js";
import "./chunk-AELGQ5AX.js";
import "./chunk-BYTE5X3W.js";
import "./chunk-FMFFUJ5P.js";
import "./chunk-CD2EWRQ7.js";
import "./chunk-VP353VHE.js";
import "./chunk-ZW7WJ6XU.js";
import "./chunk-EQ73VCH2.js";
import "./chunk-ZYZV53VC.js";
import "./chunk-MNQBHM3R.js";
import "./chunk-GTPYCOUP.js";
import "./chunk-ZD6LNQGJ.js";
import "./chunk-EE6BWLEH.js";
import "./chunk-GMJRQ4GV.js";
import "./chunk-FGGGO2DZ.js";
import "./chunk-7DH5MCSV.js";
import {
  require_interopRequireDefault
} from "./chunk-TLFXR74K.js";
import "./chunk-3MYK7QA7.js";
import "./chunk-PV2SKI4O.js";
import "./chunk-QU2EF56W.js";
import "./chunk-M2PVS73C.js";
import "./chunk-BNEW25V6.js";
import "./chunk-U243NDV7.js";
import "./chunk-Y25LVRF6.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-BBOVA64J.js";
import {
  alpha
} from "./chunk-YCPTZO5R.js";
import "./chunk-UQVM37FU.js";
import {
  clsx_default,
  init_clsx
} from "./chunk-C4K23CXS.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-BYQNWZ3B.js";
import {
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_generateUtilityClass,
  init_generateUtilityClasses,
  init_ownerDocument,
  init_useForkRef,
  ownerDocument,
  useForkRef
} from "./chunk-H4FC6BX4.js";
import {
  _extends,
  init_extends
} from "./chunk-ZW3DX352.js";
import {
  require_prop_types
} from "./chunk-XAUU4KKC.js";
import {
  require_jsx_runtime
} from "./chunk-DT77FM6J.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __commonJS,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@mui/utils/unsupportedProp.js
var require_unsupportedProp = __commonJS({
  "node_modules/@mui/utils/unsupportedProp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = unsupportedProp2;
    function unsupportedProp2(props, propName, componentName, location, propFullName) {
      if (false) {
        return null;
      }
      const propFullNameSafe = propFullName || propName;
      if (typeof props[propName] !== "undefined") {
        return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
      }
      return null;
    }
  }
});

// node_modules/@mui/utils/chainPropTypes/chainPropTypes.js
var require_chainPropTypes = __commonJS({
  "node_modules/@mui/utils/chainPropTypes/chainPropTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = chainPropTypes;
    function chainPropTypes(propType1, propType2) {
      if (false) {
        return () => null;
      }
      return function validate(...args) {
        return propType1(...args) || propType2(...args);
      };
    }
  }
});

// node_modules/@mui/utils/chainPropTypes/index.js
var require_chainPropTypes2 = __commonJS({
  "node_modules/@mui/utils/chainPropTypes/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _chainPropTypes.default;
      }
    });
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
  }
});

// node_modules/@mui/utils/elementTypeAcceptingRef.js
var require_elementTypeAcceptingRef = __commonJS({
  "node_modules/@mui/utils/elementTypeAcceptingRef.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
    function isClassComponent(elementType) {
      const {
        prototype = {}
      } = elementType;
      return Boolean(prototype.isReactComponent);
    }
    function elementTypeAcceptingRef2(props, propName, componentName, location, propFullName) {
      const propValue = props[propName];
      const safePropName = propFullName || propName;
      if (propValue == null || // When server-side rendering React doesn't warn either.
      // This is not an accurate check for SSR.
      // This is only in place for emotion compat.
      // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
      typeof window === "undefined") {
        return null;
      }
      let warningHint;
      if (typeof propValue === "function" && !isClassComponent(propValue)) {
        warningHint = "Did you accidentally provide a plain function component instead?";
      }
      if (warningHint !== void 0) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
      }
      return null;
    }
    var _default = exports.default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef2);
  }
});

// node_modules/@mui/x-tree-view/TreeItem/TreeItem.js
init_objectWithoutPropertiesLoose();
init_extends();
var React3 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
init_clsx();
init_ownerDocument();
init_useForkRef();
var import_unsupportedProp = __toESM(require_unsupportedProp());
var import_elementTypeAcceptingRef = __toESM(require_elementTypeAcceptingRef());

// node_modules/@mui/x-tree-view/TreeItem/TreeItemContent.js
init_extends();
init_objectWithoutPropertiesLoose();
var React2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx();

// node_modules/@mui/x-tree-view/internals/TreeViewProvider/useTreeViewContext.js
var React = __toESM(require_react());
var useTreeViewContext = () => React.useContext(TreeViewContext);

// node_modules/@mui/x-tree-view/TreeItem/useTreeItem.js
function useTreeItem(nodeId) {
  const {
    instance,
    multiSelect
  } = useTreeViewContext();
  const expandable = instance ? instance.isNodeExpandable(nodeId) : false;
  const expanded = instance ? instance.isNodeExpanded(nodeId) : false;
  const focused = instance ? instance.isNodeFocused(nodeId) : false;
  const selected = instance ? instance.isNodeSelected(nodeId) : false;
  const disabled = instance ? instance.isNodeDisabled(nodeId) : false;
  const handleExpansion = (event) => {
    if (instance && !disabled) {
      if (!focused) {
        instance.focusNode(event, nodeId);
      }
      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);
      if (expandable && !(multiple && instance.isNodeExpanded(nodeId))) {
        instance.toggleNodeExpansion(event, nodeId);
      }
    }
  };
  const handleSelection = (event) => {
    if (instance && !disabled) {
      if (!focused) {
        instance.focusNode(event, nodeId);
      }
      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);
      if (multiple) {
        if (event.shiftKey) {
          instance.selectRange(event, {
            end: nodeId
          });
        } else {
          instance.selectNode(event, nodeId, true);
        }
      } else {
        instance.selectNode(event, nodeId);
      }
    }
  };
  const preventSelection = (event) => {
    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {
      event.preventDefault();
    }
  };
  return {
    disabled,
    expanded,
    selected,
    focused,
    handleExpansion,
    handleSelection,
    preventSelection
  };
}

// node_modules/@mui/x-tree-view/TreeItem/TreeItemContent.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded = ["classes", "className", "displayIcon", "expansionIcon", "icon", "label", "nodeId", "onClick", "onMouseDown"];
var TreeItemContent = React2.forwardRef(function TreeItemContent2(props, ref) {
  const {
    classes,
    className,
    displayIcon,
    expansionIcon,
    icon: iconProp,
    label,
    nodeId,
    onClick,
    onMouseDown
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    disabled,
    expanded,
    selected,
    focused,
    handleExpansion,
    handleSelection,
    preventSelection
  } = useTreeItem(nodeId);
  const icon = iconProp || expansionIcon || displayIcon;
  const handleMouseDown = (event) => {
    preventSelection(event);
    if (onMouseDown) {
      onMouseDown(event);
    }
  };
  const handleClick = (event) => {
    handleExpansion(event);
    handleSelection(event);
    if (onClick) {
      onClick(event);
    }
  };
  return (
    /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions -- Key event is handled by the TreeView */
    (0, import_jsx_runtime2.jsxs)("div", _extends({}, other, {
      className: clsx_default(className, classes.root, expanded && classes.expanded, selected && classes.selected, focused && classes.focused, disabled && classes.disabled),
      onClick: handleClick,
      onMouseDown: handleMouseDown,
      ref,
      children: [(0, import_jsx_runtime.jsx)("div", {
        className: classes.iconContainer,
        children: icon
      }), (0, import_jsx_runtime.jsx)("div", {
        className: classes.label,
        children: label
      })]
    }))
  );
});
true ? TreeItemContent.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types.default.object.isRequired,
  /**
   * className applied to the root element.
   */
  className: import_prop_types.default.string,
  /**
   * The icon to display next to the tree node's label. Either a parent or end icon.
   */
  displayIcon: import_prop_types.default.node,
  /**
   * The icon to display next to the tree node's label. Either an expansion or collapse icon.
   */
  expansionIcon: import_prop_types.default.node,
  /**
   * The icon to display next to the tree node's label.
   */
  icon: import_prop_types.default.node,
  /**
   * The tree node label.
   */
  label: import_prop_types.default.node,
  /**
   * The id of the node.
   */
  nodeId: import_prop_types.default.string.isRequired
} : void 0;

// node_modules/@mui/x-tree-view/TreeItem/treeItemClasses.js
init_generateUtilityClass();
init_generateUtilityClasses();
function getTreeItemUtilityClass(slot) {
  return generateUtilityClass("MuiTreeItem", slot);
}
var treeItemClasses = generateUtilityClasses("MuiTreeItem", ["root", "group", "content", "expanded", "selected", "focused", "disabled", "iconContainer", "label"]);

// node_modules/@mui/x-tree-view/TreeItem/TreeItem.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var _excluded2 = ["children", "className", "collapseIcon", "ContentComponent", "ContentProps", "endIcon", "expandIcon", "disabled", "icon", "id", "label", "nodeId", "onClick", "onMouseDown", "TransitionComponent", "TransitionProps"];
var useUtilityClasses = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["root"],
    content: ["content"],
    expanded: ["expanded"],
    selected: ["selected"],
    focused: ["focused"],
    disabled: ["disabled"],
    iconContainer: ["iconContainer"],
    label: ["label"],
    group: ["group"]
  };
  return composeClasses(slots, getTreeItemUtilityClass, classes);
};
var TreeItemRoot = styled_default("li", {
  name: "MuiTreeItem",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  listStyle: "none",
  margin: 0,
  padding: 0,
  outline: 0
});
var StyledTreeItemContent = styled_default(TreeItemContent, {
  name: "MuiTreeItem",
  slot: "Content",
  overridesResolver: (props, styles) => {
    return [styles.content, styles.iconContainer && {
      [`& .${treeItemClasses.iconContainer}`]: styles.iconContainer
    }, styles.label && {
      [`& .${treeItemClasses.label}`]: styles.label
    }];
  }
})(({
  theme
}) => ({
  padding: "0 8px",
  width: "100%",
  boxSizing: "border-box",
  // prevent width + padding to overflow
  display: "flex",
  alignItems: "center",
  cursor: "pointer",
  WebkitTapHighlightColor: "transparent",
  "&:hover": {
    backgroundColor: (theme.vars || theme).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  [`&.${treeItemClasses.disabled}`]: {
    opacity: (theme.vars || theme).palette.action.disabledOpacity,
    backgroundColor: "transparent"
  },
  [`&.${treeItemClasses.focused}`]: {
    backgroundColor: (theme.vars || theme).palette.action.focus
  },
  [`&.${treeItemClasses.selected}`]: {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    },
    [`&.${treeItemClasses.focused}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    }
  },
  [`& .${treeItemClasses.iconContainer}`]: {
    marginRight: 4,
    width: 15,
    display: "flex",
    flexShrink: 0,
    justifyContent: "center",
    "& svg": {
      fontSize: 18
    }
  },
  [`& .${treeItemClasses.label}`]: _extends({
    paddingLeft: 4,
    width: "100%",
    boxSizing: "border-box",
    // prevent width + padding to overflow
    // fixes overflow - see https://github.com/mui/material-ui/issues/27372
    minWidth: 0,
    position: "relative"
  }, theme.typography.body1)
}));
var TreeItemGroup = styled_default(Collapse_default, {
  name: "MuiTreeItem",
  slot: "Group",
  overridesResolver: (props, styles) => styles.group
})({
  margin: 0,
  padding: 0,
  marginLeft: 17
});
var TreeItem = React3.forwardRef(function TreeItem2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiTreeItem"
  });
  const {
    children,
    className,
    collapseIcon,
    ContentComponent = TreeItemContent,
    ContentProps,
    endIcon,
    expandIcon,
    disabled: disabledProp,
    icon,
    id: idProp,
    label,
    nodeId,
    onClick,
    onMouseDown,
    TransitionComponent = Collapse_default,
    TransitionProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const {
    icons: contextIcons,
    multiSelect,
    disabledItemsFocusable,
    treeId,
    instance
  } = useTreeViewContext();
  let id;
  if (idProp != null) {
    id = idProp;
  } else if (treeId && nodeId) {
    id = `${treeId}-${nodeId}`;
  }
  const [treeItemElement, setTreeItemElement] = React3.useState(null);
  const contentRef = React3.useRef(null);
  const handleRef = useForkRef(setTreeItemElement, ref);
  const descendant = React3.useMemo(() => ({
    element: treeItemElement,
    id: nodeId
  }), [nodeId, treeItemElement]);
  const {
    index,
    parentId
  } = useDescendant(descendant);
  const expandable = Boolean(Array.isArray(children) ? children.length : children);
  const expanded = instance ? instance.isNodeExpanded(nodeId) : false;
  const focused = instance ? instance.isNodeFocused(nodeId) : false;
  const selected = instance ? instance.isNodeSelected(nodeId) : false;
  const disabled = instance ? instance.isNodeDisabled(nodeId) : false;
  const ownerState = _extends({}, props, {
    expanded,
    focused,
    selected,
    disabled
  });
  const classes = useUtilityClasses(ownerState);
  let displayIcon;
  let expansionIcon;
  if (expandable) {
    if (!expanded) {
      expansionIcon = expandIcon || contextIcons.defaultExpandIcon;
    } else {
      expansionIcon = collapseIcon || contextIcons.defaultCollapseIcon;
    }
  }
  if (expandable) {
    displayIcon = contextIcons.defaultParentIcon;
  } else {
    displayIcon = endIcon || contextIcons.defaultEndIcon;
  }
  React3.useEffect(() => {
    if (instance && index !== -1) {
      instance.updateNode({
        id: nodeId,
        idAttribute: id,
        index,
        parentId,
        expandable,
        disabled: disabledProp
      });
      return () => instance.removeNode(nodeId);
    }
    return void 0;
  }, [instance, parentId, index, nodeId, expandable, disabledProp, id]);
  React3.useEffect(() => {
    if (instance && label) {
      var _contentRef$current$t, _contentRef$current;
      return instance.mapFirstChar(nodeId, ((_contentRef$current$t = (_contentRef$current = contentRef.current) == null ? void 0 : _contentRef$current.textContent) != null ? _contentRef$current$t : "").substring(0, 1).toLowerCase());
    }
    return void 0;
  }, [instance, nodeId, label]);
  let ariaSelected;
  if (multiSelect) {
    ariaSelected = selected;
  } else if (selected) {
    ariaSelected = true;
  }
  function handleFocus(event) {
    if (event.target === event.currentTarget) {
      let rootElement;
      if (typeof event.target.getRootNode === "function") {
        rootElement = event.target.getRootNode();
      } else {
        rootElement = ownerDocument(event.target);
      }
      rootElement.getElementById(treeId).focus({
        preventScroll: true
      });
    }
    const unfocusable = !disabledItemsFocusable && disabled;
    if (instance && !focused && event.currentTarget === event.target && !unfocusable) {
      instance.focusNode(event, nodeId);
    }
  }
  return (0, import_jsx_runtime4.jsxs)(TreeItemRoot, _extends({
    className: clsx_default(classes.root, className),
    role: "treeitem",
    "aria-expanded": expandable ? expanded : void 0,
    "aria-selected": ariaSelected,
    "aria-disabled": disabled || void 0,
    id,
    tabIndex: -1
  }, other, {
    ownerState,
    onFocus: handleFocus,
    ref: handleRef,
    children: [(0, import_jsx_runtime3.jsx)(StyledTreeItemContent, _extends({
      as: ContentComponent,
      ref: contentRef,
      classes: {
        root: classes.content,
        expanded: classes.expanded,
        selected: classes.selected,
        focused: classes.focused,
        disabled: classes.disabled,
        iconContainer: classes.iconContainer,
        label: classes.label
      },
      label,
      nodeId,
      onClick,
      onMouseDown,
      icon,
      expansionIcon,
      displayIcon,
      ownerState
    }, ContentProps)), children && (0, import_jsx_runtime3.jsx)(DescendantProvider, {
      id: nodeId,
      children: (0, import_jsx_runtime3.jsx)(TreeItemGroup, _extends({
        as: TransitionComponent,
        unmountOnExit: true,
        className: classes.group,
        in: expanded,
        component: "ul",
        role: "group"
      }, TransitionProps, {
        children
      }))
    })]
  }));
});
true ? TreeItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types2.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types2.default.object,
  /**
   * className applied to the root element.
   */
  className: import_prop_types2.default.string,
  /**
   * The icon used to collapse the node.
   */
  collapseIcon: import_prop_types2.default.node,
  /**
   * The component used for the content node.
   * @default TreeItemContent
   */
  ContentComponent: import_elementTypeAcceptingRef.default,
  /**
   * Props applied to ContentComponent.
   */
  ContentProps: import_prop_types2.default.object,
  /**
   * If `true`, the node is disabled.
   * @default false
   */
  disabled: import_prop_types2.default.bool,
  /**
   * The icon displayed next to an end node.
   */
  endIcon: import_prop_types2.default.node,
  /**
   * The icon used to expand the node.
   */
  expandIcon: import_prop_types2.default.node,
  /**
   * The icon to display next to the tree node's label.
   */
  icon: import_prop_types2.default.node,
  /**
   * The tree node label.
   */
  label: import_prop_types2.default.node,
  /**
   * The id of the node.
   */
  nodeId: import_prop_types2.default.string.isRequired,
  /**
   * This prop isn't supported.
   * Use the `onNodeFocus` callback on the tree if you need to monitor a node's focus.
   */
  onFocus: import_unsupportedProp.default,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Collapse
   */
  TransitionComponent: import_prop_types2.default.elementType,
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
   */
  TransitionProps: import_prop_types2.default.object
} : void 0;
export {
  TreeItem,
  TreeItemContent,
  getTreeItemUtilityClass,
  treeItemClasses,
  useTreeItem
};
//# sourceMappingURL=@mui_x-tree-view_TreeItem.js.map
